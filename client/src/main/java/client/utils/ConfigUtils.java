package client.utils;

import java.io.*;
import java.util.Locale;
import java.util.Properties;

public class ConfigUtils {
    public static final String CONFIG_NAME = "splitty.properties";
    public static final int CONFIG_VERSION = 2; // update this whenever you add/remove/change default properties
    public static final String DEFAULT_PROPS_SERVER_URL = "http://localhost:8080/";
    public static final String DEFAULT_PROPS_LANGUAGE = Locale.ENGLISH.getLanguage();

    private final Properties properties;
    private final Reader propertyReader;
    private final Writer propertyWriter;

    public ConfigUtils(Properties properties, Reader propertyReader, Writer propertyWriter) {
        this.propertyReader = propertyReader;
        this.propertyWriter = propertyWriter;
        this.properties = properties;
    }

    /***
     * Full method for loading properties from the config file, or generating a default one
     * @return all properties found in the config file
     */
    public static Properties loadProperties(){
        Properties properties = new Properties();

        FileWriter writer;
        try {
            writer = new FileWriter(ConfigUtils.CONFIG_NAME);
        } catch (IOException e) {
            // the file is actually a directory, or can not be accessed at all
            // this should not happen ever, so throw a RuntimeException
            throw new RuntimeException(e);
        }

        FileReader reader;
        ConfigUtils config;
        try {
            reader = new FileReader(ConfigUtils.CONFIG_NAME);

            config = new ConfigUtils(properties, reader, writer);
            config.getPropertiesFromFile();
        } catch (IOException e) {
            config = new ConfigUtils(properties, null, writer);
            config.loadDefaults();
        }

        return config.getProperties();
    }

    /**
     * Attempts to load properties from the Reader
     * @throws IOException if the config Reader is malformed
     */
    public void getPropertiesFromFile() throws IOException {
        properties.load(propertyReader);

        if(properties.get("config.version")!=String.valueOf(CONFIG_VERSION)) {
            loadDefaults(); // reload if our config has been updated in code
        }
    }

    /***
     * Loads default values into the properties, and attempts to save them as a file
     */
    public void loadDefaults(){
        properties.setProperty("config.version", String.valueOf(CONFIG_VERSION));
        properties.setProperty("connection.URL", DEFAULT_PROPS_SERVER_URL);
        properties.setProperty("client.language", DEFAULT_PROPS_LANGUAGE);

        try {
            properties.store(propertyWriter, null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /***
     * Returns the generated Properties object
     * @return the Properties generated by the instance
     */
    public Properties getProperties() {
        return properties;
    }
}
